{
  "name": "funders",
  "version": "1.0.0",
  "description": "The Funders application",
  "scripts": {
    "database:migrate:dev": "export POSTGRES_URL=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') && cd backend && npx prisma migrate dev && npx prisma generate",
    "database:migrate:undo:all:dev": "cd backend/prisma && rm -rf migrations/*",
    "database:pull:dev": "export POSTGRES_URL=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') && cd backend && npx prisma db pull",
    "database:push:dev": "export POSTGRES_URL=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') && cd backend && npx prisma db push",
    "database:migrate:local": "export POSTGRES_URL=$(docker compose --file docker-compose.local.yml --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') && cd backend && npx prisma migrate dev && npx prisma generate",
    "database:migrate:undo:all:local": "cd backend/prisma && rm -rf migrations/*",
    "database:pull:local": "export POSTGRES_URL=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') && cd backend && npx prisma db pull",
    "database:push:local": "export POSTGRES_URL=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') && cd backend && npx prisma db push",
    "seed:all:dev": "export POSTGRES_URL=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') USER_PASSWORD_SALT_PREFIX=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_PREFIX') USER_PASSWORD_SALT_SUFFIX=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_SUFFIX') STRIPE_API_KEY=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $STRIPE_API_KEY') && cd backend && npm run seed:all",
    "seed:undo:all:dev": "export POSTGRES_URL=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') USER_PASSWORD_SALT_PREFIX=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_PREFIX') USER_PASSWORD_SALT_SUFFIX=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_SUFFIX') STRIPE_API_KEY=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $STRIPE_API_KEY') && cd backend && npm run seed:undo:all",
    "seed:redo:all:dev": "export POSTGRES_URL=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') USER_PASSWORD_SALT_PREFIX=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_PREFIX') USER_PASSWORD_SALT_SUFFIX=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_SUFFIX') STRIPE_API_KEY=$(docker compose --env-file=.env.dev --file docker-compose.dev.yml exec backend sh -c 'echo $STRIPE_API_KEY') && cd backend && npm run seed:undo:all && npm run seed:all",
    "seed:all:local": "export POSTGRES_URL=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') USER_PASSWORD_SALT_PREFIX=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_PREFIX') USER_PASSWORD_SALT_SUFFIX=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_SUFFIX') STRIPE_API_KEY=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $STRIPE_API_KEY') && cd backend && npm run seed:all",
    "seed:undo:all:local": "export POSTGRES_URL=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') USER_PASSWORD_SALT_PREFIX=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_PREFIX') USER_PASSWORD_SALT_SUFFIX=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_SUFFIX') STRIPE_API_KEY=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $STRIPE_API_KEY') && cd backend && npm run seed:undo:all",
    "seed:redo:all:local": "export POSTGRES_URL=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $EXTERNAL_POSTGRES_URL') USER_PASSWORD_SALT_PREFIX=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_PREFIX') USER_PASSWORD_SALT_SUFFIX=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $USER_PASSWORD_SALT_SUFFIX') STRIPE_API_KEY=$(docker compose --env-file=.env.local --file docker-compose.local.yml exec backend sh -c 'echo $STRIPE_API_KEY') && cd backend && npm run seed:undo:all && npm run seed:all",
    "seed:create": "node backend/prisma/seeders/index.ts --create ${npm_config_name} && sudo chmod -R 777 backend/prisma/seeders/",
    "init:backend": "cd backend && npm install",
    "init:frontend": "cd frontend && npm install",
    "init": "npm install && npm-run-all -p init:*",
    "build:docker:dev": "docker compose --env-file=.env.dev --file docker-compose.dev.yml build",
    "start:docker:dev": "docker compose --env-file=.env.dev --file docker-compose.dev.yml up -d",
    "start:build:docker:dev": "docker compose --env-file=.env.dev --file docker-compose.dev.yml up --build -d",
    "stop:docker:dev": "docker compose --env-file=.env.dev --file docker-compose.dev.yml down",
    "build:docker:local": "docker compose --env-file=.env.local --file docker-compose.local.yml build",
    "start:docker:local": "docker compose --env-file=.env.local --file docker-compose.local.yml up -d",
    "start:build:docker:local": "docker compose --env-file=.env.local --file docker-compose.local.yml up --build -d",
    "stop:docker:local": "docker compose --env-file=.env.local --file docker-compose.local.yml down",
    "build:docker:prod": "docker compose --env-file=.env.prod --file docker-compose.prod.yml build",
    "start:docker:prod": "docker compose --env-file=.env.prod --file docker-compose.prod.yml up -d",
    "start:build:docker:prod": "docker compose --env-file=.env.prod --file docker-compose.prod.yml up --build -d",
    "stop:docker:prod": "docker compose --env-file=.env.prod --file docker-compose.prod.yml down"
  },
  "author": "Oleksandr Igumnov",
  "license": "UNLICENSED",
  "devDependencies": {
    "@typescript-eslint/eslint-plugin": "^6.16.0",
    "@typescript-eslint/parser": "^6.16.0",
    "eslint": "^8.56.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.2",
    "npm-run-all": "^4.1.5",
    "prettier": "3.1.1",
    "typescript": "^5.3.3"
  }
}
