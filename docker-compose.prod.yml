version: '3.8'

services:
  backend:
    # build:
    #   context: ./backend
    #   dockerfile: ./Dockerfile.prod
    image: kalyonekenobe/funders-backend:latest
    container_name: funders-backend
    networks:
      - funders-network
    env_file: ./.env.prod
    environment:
      POSTGRES_URL: ${POSTGRES_URL}
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      USER_PASSWORD_SALT_PREFIX: ${USER_PASSWORD_SALT_PREFIX}
      USER_PASSWORD_SALT_SUFFIX: ${USER_PASSWORD_SALT_SUFFIX}
    ports:
      - ${BACKEND_INTERNAL_PORT}:8000
    volumes:
      - ./backend/src:/app/src
      - ./backend/test:/app/test
    depends_on:
      - database
    deploy:
      resources:
        limits:
          memory: 256M

  frontend:
    # build:
    #   context: ./frontend
    #   dockerfile: ./Dockerfile.prod
    image: kalyonekenobe/funders-frontend:latest
    container_name: funders-frontend
    networks:
      - funders-network
    env_file: ./.env.prod
    ports:
      - ${FRONTEND_INTERNAL_PORT}:3000
    volumes:
      - ./frontend/app:/app/app
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          memory: 288M

  database:
    image: postgres:latest
    container_name: funders-database
    networks:
      - funders-network
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - ${DATABASE_PORT}:5432
    expose:
      - ${DATABASE_PORT}
    volumes:
      - funders-database-data:/var/lib/postgresql/data
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 64M

  nginx:
    image: nginx:latest
    container_name: funders-nginx
    networks:
      - funders-network
    env_file: ./.env.prod
    ports:
      - ${NGINX_INTERNAL_PORT}:80
      - ${NGINX_SSL_INTERNAL_PORT}:443
    expose:
      - ${NGINX_INTERNAL_PORT}
    volumes:
      - ./nginx/default.prod.conf:/etc/nginx/conf.d/default.conf
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    restart: on-failure
    command:
      '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon
      off;"'''
    deploy:
      resources:
        limits:
          memory: 32M

  certbot:
    image: certbot/certbot
    container_name: funders-certbot
    networks:
      - funders-network
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint:
      "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    deploy:
      resources:
        limits:
          memory: 32M

networks:
  funders-network:
    driver: bridge

volumes:
  funders-database-data:
